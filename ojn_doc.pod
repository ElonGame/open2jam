=pod

This post tries to describe the OJN format. This far from complete but we can already extract most of the good stuff from the file.

=head1 OJN FORMAT DOCUMENTATION 0.1

The OJN file is where all the notes are stored, including the meta-data of the music.
ItE<rsquo>s basically divided in 3 parts: header, notes and cover section.

=head2 Header

The header section is where all the song meta-data and offsets is stored.

Meta-data consists in the song title, levels, genre, etc..

offsets are numbers used to know where to get the actual data.

In C struct notation, this is how the header looks like:

struct header {

	int songid;
	char signature[8];
	int genre;
	float bpm;
	short level[3];
	short unk_nums[6];
	char unk_zero[2];
	int note_count[3];
	int unk_time[3];
	int package_count[3];
	short unk_id[2];
	char unk_oldgenre[5];
	char unk_zero2[14];
	char unk_bool[1];
	char unk_k[2];
	char unk_zero3[6];
	char title[64];
	char artist[32];
	char noter[32];
	char ojm_file[32];
	int cover_size;
	int time[3];
	int note_offset[4];
};

Variables with prefix 'unk_' are unknown at the time of this writing, so take what I say as a guess.

You will see the word 'usually' a lot here, when I say 'usually something is like X' I mean that I observed it in most, if not all, 
of the official songs, but can't say it will be always like that because anyone can change it to anything.

=over

=item B<songid: > the ID of the song, usually the same ID in the name of the file: o2ma[songid].ojn

=item B<signature: > probably a magic number to identify the files, the content is C<ojnE<lt>null-byteE<gt>> followed by more 4 characters, usually like this: E<lt>6f 6a 6e 00 9a 99 39 40E<gt>(hex notation)

=item B<genre: > a code number representing the genre of the song as follows in the table:

0	Ballad
1	Rock
2	Dance
3	Techno
4	Hip-hop
5	Soul/R&B
6	Jazz
7	Funk
8	Classical
9	Traditional
10	Etc

=item B<bpm: >the song bpm. this is probably not related with the song actual bpm, ie. changing this field will not change the song speed.

=item B<level: >3 values representing respectively the easy, normal and hard levels of the song.

=item B<note_count: >the number of notes in each level(easy, normal,hard).

=item B<package_count: >the number of packages in each level section(more about packages in the below Notes section).

=item B<title: >the title of the song.

=item B<artist: >the artist of the song.

=item B<noter: >the noter of the song.

=item B<ojm_file: >the name of the OJM file with the sounds of this music, usually is the same name of this file but ending in ojm.

=item B<cover_size: >this is the size of the cover image, in bytes.

=item B<time: >this is the duration of each level in seconds.

=item B<note_offset: >this 4 numbers are respectivly, the offset of the easy, normal, hard and cover section. these section are together, which means the normal offset is the end of the easy and the cover offset is the end of the hard section.

=back

=head2 unknown variables

=over

=item B<unk_nums: >the par numbers(unk_nums[0], unk_nums[2], unk_nums[4]) are usually zero(even on non-official ones) the others are, 
either crescent numbers(unk_nums[1] E<lt> unk_nums[3] E<lt> unk_nums[5]) or all equal( in this case the music is the same in all levels), 
these zeros makes me think they could be intE<rsquo>s but the values are usually to big in intE<rsquo>s to be something meaningful.

=item B<unk_zero: >usually always zero.

=item B<unk_time: >these usually are all equal, with notable exceptions when the music have different times, example: Gaussian Blur on hard 
have 2 extra seconds than easy and normal, and incidentally the unk_time[2] of Gaussian Blur is also different. also these numbers are usually smaller than the time.

=item B<unk_id: >funny variable, unk_id[0] is usually the number 29, while unk_id[1] is usually the songid.

=item B<unk_oldgenre: >another funny one, in official songs I saw things like E<lsquo>sicalE<rsquo> while the genre is 8(Classical), and E<lsquo>noE<rsquo> 
with genre 3(Techno), they probally used this to store the genre in strings but gave up in the idea later ?

=item B<unk_zero2: >usually they are all zero.

=item B<unk_bool: >from the 713 songs(official and non-official) I got, 589 of then have 1 for this value, the rest is zero, probally a boolean.

=item B<unk_k: >from all my songs, 405 of then have '8K', 236 have '6K' (mostly official ones) the rest is apparently junk.

=item B<unk_zero3: >usually all zero.

=back

=head1 Notes section

[TO BE ADDED]

=head1 Cover section

After the hard level notes section( note_offset[3] offset ), starts the
cover image data, in JPEG format and have size cover_size, also they usually have a 8x8 preview image in BMP format right after this one.

----

And that's it for now. As you could see the notes section is lacking, I have some about the note section already but I'm trying to gather 
more info and then I'll update this. I also now nothing about the OJM format and there's probably some kind of reference between the files 
so it makes this even harder.

I got some scripts I made to extract info from the files. take a look at open2jam on github (http://github.com/chaosfox/open2jam)

If you see any errors in this post, or got any info that's not already here, please, post in the comments. thank you.

=cut
