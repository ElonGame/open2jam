/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * KeyEventListener.java
 *
 * Created on 20-feb-2011, 22:10:54
 */

package org.open2jam.gui;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

/**
 *
 * @author CdK
 */
public class KeyEventListener extends javax.swing.JFrame implements KeyListener {

    private int row = -1;
    private KeyEvent ke;

    /** Creates new form KeyEventListener */
    public KeyEventListener(int row) {
        this.row = row;

        initComponents();
        initLogic();
        this.setLocationRelativeTo(null);
    }

    private void initLogic()
    {
        this.setTitle("Assign for "+Configuration.getTableValue(this.row, 0));
        lbl_assign.setText(Configuration.getTableValue(this.row, 0));
        lbl_lastassign.setText(Configuration.getTableValue(this.row, 1));

        if(this.row<0) this.setVisible(false);
        else           txt_newassign.setText("Press a key");

        txt_newassign.addKeyListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txt_newassign = new javax.swing.JTextField();
        lbl_assing1 = new javax.swing.JLabel();
        lbl_lastassign1 = new javax.swing.JLabel();
        lbl_newassign1 = new javax.swing.JLabel();
        lbl_assign = new javax.swing.JLabel();
        lbl_lastassign = new javax.swing.JLabel();
        btn_ok = new javax.swing.JButton();
        btn_cancel = new javax.swing.JButton();

        setTitle("Assign key to NOTE");

        txt_newassign.setEditable(false);

        lbl_assing1.setText("Assign to:");

        lbl_lastassign1.setText("Last assign:");

        lbl_newassign1.setText("New assign:");

        lbl_assign.setText("jLabel4");

        lbl_lastassign.setText("jLabel5");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_lastassign1)
                    .addComponent(lbl_assing1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_assign)
                    .addComponent(lbl_lastassign))
                .addContainerGap(227, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(lbl_newassign1)
                    .addGap(18, 18, 18)
                    .addComponent(txt_newassign, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_assing1)
                    .addComponent(lbl_assign))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_lastassign1)
                    .addComponent(lbl_lastassign))
                .addContainerGap(46, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(60, 60, 60)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbl_newassign1)
                        .addComponent(txt_newassign, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(20, Short.MAX_VALUE)))
        );

        btn_ok.setFont(new java.awt.Font("Tahoma", 1, 11));
        btn_ok.setText("OK");
        btn_ok.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_okMouseClicked(evt);
            }
        });

        btn_cancel.setText("cancel");
        btn_cancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_cancelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btn_ok)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_cancel))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_cancel)
                    .addComponent(btn_ok))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_cancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_cancelMouseClicked
        this.setVisible(false);
    }//GEN-LAST:event_btn_cancelMouseClicked

    private void btn_okMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_okMouseClicked
        if(ke != null)
            Configuration.setTableValue(ke, row, 1);

        this.setVisible(false);
    }//GEN-LAST:event_btn_okMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton btn_cancel;
    private static javax.swing.JButton btn_ok;
    private static javax.swing.JPanel jPanel1;
    private static javax.swing.JLabel lbl_assign;
    private static javax.swing.JLabel lbl_assing1;
    private static javax.swing.JLabel lbl_lastassign;
    private static javax.swing.JLabel lbl_lastassign1;
    private static javax.swing.JLabel lbl_newassign1;
    private static javax.swing.JTextField txt_newassign;
    // End of variables declaration//GEN-END:variables

    public void keyTyped(KeyEvent e) {
        //NOTHING
    }

    public void keyPressed(KeyEvent e) {
        if(isMappeable(e.getKeyCode()))
        {
            this.ke = e;
            txt_newassign.setText(translateKeyEvent(e));
        }
        else
        {
            txt_newassign.setText("Key ["+translateKeyEvent(e)+"] isn't mappeable");
        }
    }

    public void keyReleased(KeyEvent e) {
        /* TODO I'm not sure if it should do de same, but without this it fails to get some keys
         * like other key after you pressed the alt key, you have to press other key twice
         * I'm guessing is because the alt is used to bring the menu normally
         *
         * Whit this, you can hear a sound (windows if you have sounds enabled) when presses
         * alt and then other key
         */
        if(isMappeable(e.getKeyCode()))
        {
            this.ke = e;
            txt_newassign.setText(translateKeyEvent(e));
        }
        else
        {
            txt_newassign.setText("Key ["+translateKeyEvent(e)+"] isn't mappeable");
        }
    }


    protected static String translateKeyEvent(KeyEvent e)
    {
        String keyString;

        int keyCode = e.getKeyCode();
        keyString = KeyEvent.getKeyText(keyCode);

        String locationS = "KBD::";
        int location = e.getKeyLocation();

        if (location == KeyEvent.KEY_LOCATION_LEFT) {
            locationS += "LEFT_";
        } else if (location == KeyEvent.KEY_LOCATION_RIGHT) {
            locationS += "RIGHT_";
        }

        return locationS+keyString;
    }

    protected static String translateKeyEvent(int i)
    {
        String keyString;

        keyString = KeyEvent.getKeyText(i);

        String locationS = "KBD::";
//        int location = KeyEvent.getKeyLocation();
//
//        if (location == KeyEvent.KEY_LOCATION_LEFT) {
//            locationS += "LEFT_";
//        } else if (location == KeyEvent.KEY_LOCATION_RIGHT) {
//            locationS += "RIGHT_";
//        }

        return locationS+keyString;
    }

    protected static Boolean isMappeable(int keyCode)
    {
        switch(keyCode)
        {
		case KeyEvent.VK_0:
		case KeyEvent.VK_1:
		case KeyEvent.VK_2:
		case KeyEvent.VK_3:
		case KeyEvent.VK_4:
		case KeyEvent.VK_5:
		case KeyEvent.VK_6:
		case KeyEvent.VK_7:
		case KeyEvent.VK_8:
		case KeyEvent.VK_9:
		case KeyEvent.VK_A:
//		case KeyEvent.VK_ACCEPT:
		case KeyEvent.VK_ADD:
//		case KeyEvent.VK_AGAIN:
//		case KeyEvent.VK_ALL_CANDIDATES:
//		case KeyEvent.VK_ALPHANUMERIC:
//		case KeyEvent.VK_ALT:
		case KeyEvent.VK_ALT_GRAPH:
//		case KeyEvent.VK_AMPERSAND:
//		case KeyEvent.VK_ASTERISK:
		case KeyEvent.VK_AT:
		case KeyEvent.VK_B:
//		case KeyEvent.VK_BACK_QUOTE:
		case KeyEvent.VK_BACK_SLASH:
		case KeyEvent.VK_BACK_SPACE:
//		case KeyEvent.VK_BRACELEFT:
//		case KeyEvent.VK_BRACERIGHT:
		case KeyEvent.VK_C:
//		case KeyEvent.VK_CANCEL:
		case KeyEvent.VK_CAPS_LOCK:
		case KeyEvent.VK_CIRCUMFLEX:
//		case KeyEvent.VK_CLEAR:
		case KeyEvent.VK_CLOSE_BRACKET:
//		case KeyEvent.VK_CODE_INPUT:
		case KeyEvent.VK_COLON:
		case KeyEvent.VK_COMMA:
//		case KeyEvent.VK_COMPOSE:
//		case KeyEvent.VK_CONTROL:
		case KeyEvent.VK_CONVERT:
//		case KeyEvent.VK_COPY:
//		case KeyEvent.VK_CUT:
		case KeyEvent.VK_D:
//		case KeyEvent.VK_DEAD_ABOVEDOT:
//		case KeyEvent.VK_DEAD_ABOVERING:
//		case KeyEvent.VK_DEAD_ACUTE:
//		case KeyEvent.VK_DEAD_BREVE:
//		case KeyEvent.VK_DEAD_CARON:
//		case KeyEvent.VK_DEAD_CEDILLA:
//		case KeyEvent.VK_DEAD_CIRCUMFLEX:
//		case KeyEvent.VK_DEAD_DIAERESIS:
//		case KeyEvent.VK_DEAD_DOUBLEACUTE:
//		case KeyEvent.VK_DEAD_GRAVE:
//		case KeyEvent.VK_DEAD_IOTA:
//		case KeyEvent.VK_DEAD_MACRON:
//		case KeyEvent.VK_DEAD_OGONEK:
//		case KeyEvent.VK_DEAD_SEMIVOICED_SOUND:
//		case KeyEvent.VK_DEAD_TILDE:
//		case KeyEvent.VK_DEAD_VOICED_SOUND:
		case KeyEvent.VK_DECIMAL:
		case KeyEvent.VK_DELETE:
		case KeyEvent.VK_DIVIDE:
//		case KeyEvent.VK_DOLLAR:
		case KeyEvent.VK_DOWN:
		case KeyEvent.VK_E:
		case KeyEvent.VK_END:
		case KeyEvent.VK_ENTER:
		case KeyEvent.VK_EQUALS:
		case KeyEvent.VK_ESCAPE:
//		case KeyEvent.VK_EURO_SIGN:
//		case KeyEvent.VK_EXCLAMATION_MARK:
		case KeyEvent.VK_F:
		case KeyEvent.VK_F1:
		case KeyEvent.VK_F10:
		case KeyEvent.VK_F11:
		case KeyEvent.VK_F12:
		case KeyEvent.VK_F13:
		case KeyEvent.VK_F14:
		case KeyEvent.VK_F15:
//		case KeyEvent.VK_F16:
//		case KeyEvent.VK_F17:
//		case KeyEvent.VK_F18:
//		case KeyEvent.VK_F19:
		case KeyEvent.VK_F2:
//		case KeyEvent.VK_F20:
//		case KeyEvent.VK_F21:
//		case KeyEvent.VK_F22:
//		case KeyEvent.VK_F23:
//		case KeyEvent.VK_F24:
		case KeyEvent.VK_F3:
		case KeyEvent.VK_F4:
		case KeyEvent.VK_F5:
		case KeyEvent.VK_F6:
		case KeyEvent.VK_F7:
		case KeyEvent.VK_F8:
		case KeyEvent.VK_F9:
//		case KeyEvent.VK_FINAL:
//		case KeyEvent.VK_FIND:
//		case KeyEvent.VK_FULL_WIDTH:
		case KeyEvent.VK_G:
//		case KeyEvent.VK_GREATER:
		case KeyEvent.VK_H:
//		case KeyEvent.VK_HALF_WIDTH:
//		case KeyEvent.VK_HELP:
//		case KeyEvent.VK_HIRAGANA:
		case KeyEvent.VK_HOME:
		case KeyEvent.VK_I:
//		case KeyEvent.VK_INPUT_METHOD_ON_OFF:
		case KeyEvent.VK_INSERT:
//		case KeyEvent.VK_INVERTED_EXCLAMATION_MARK:
		case KeyEvent.VK_J:
//		case KeyEvent.VK_JAPANESE_HIRAGANA:
//		case KeyEvent.VK_JAPANESE_KATAKANA:
//		case KeyEvent.VK_JAPANESE_ROMAN:
		case KeyEvent.VK_K:
		case KeyEvent.VK_KANA:
//		case KeyEvent.VK_KANA_LOCK:
		case KeyEvent.VK_KANJI:
//		case KeyEvent.VK_KATAKANA:
//		case KeyEvent.VK_KP_DOWN:
//		case KeyEvent.VK_KP_LEFT:
//		case KeyEvent.VK_KP_RIGHT:
//		case KeyEvent.VK_KP_UP:
		case KeyEvent.VK_L:
		case KeyEvent.VK_LEFT:
//		case KeyEvent.VK_LEFT_PARENTHESIS:
//		case KeyEvent.VK_LESS:
		case KeyEvent.VK_M:
//		case KeyEvent.VK_META:
		case KeyEvent.VK_MINUS:
//		case KeyEvent.VK_MODECHANGE:
		case KeyEvent.VK_MULTIPLY:
		case KeyEvent.VK_N:
//		case KeyEvent.VK_NONCONVERT:
		case KeyEvent.VK_NUM_LOCK:
//		case KeyEvent.VK_NUMBER_SIGN:
		case KeyEvent.VK_NUMPAD0:
		case KeyEvent.VK_NUMPAD1:
		case KeyEvent.VK_NUMPAD2:
		case KeyEvent.VK_NUMPAD3:
		case KeyEvent.VK_NUMPAD4:
		case KeyEvent.VK_NUMPAD5:
		case KeyEvent.VK_NUMPAD6:
		case KeyEvent.VK_NUMPAD7:
		case KeyEvent.VK_NUMPAD8:
		case KeyEvent.VK_NUMPAD9:
		case KeyEvent.VK_O:
		case KeyEvent.VK_OPEN_BRACKET:
		case KeyEvent.VK_P:
		case KeyEvent.VK_PAGE_DOWN:
		case KeyEvent.VK_PAGE_UP:
//		case KeyEvent.VK_PASTE:
		case KeyEvent.VK_PAUSE:
		case KeyEvent.VK_PERIOD:
//		case KeyEvent.VK_PLUS:
//		case KeyEvent.VK_PREVIOUS_CANDIDATE:
//		case KeyEvent.VK_PRINTSCREEN:
//		case KeyEvent.VK_PROPS:
		case KeyEvent.VK_Q:
//		case KeyEvent.VK_QUOTE:
//		case KeyEvent.VK_QUOTEDBL:
		case KeyEvent.VK_R:
		case KeyEvent.VK_RIGHT:
//		case KeyEvent.VK_RIGHT_PARENTHESIS:
//		case KeyEvent.VK_ROMAN_CHARACTERS:
		case KeyEvent.VK_S:
		case KeyEvent.VK_SCROLL_LOCK:
		case KeyEvent.VK_SEMICOLON:
		case KeyEvent.VK_SEPARATOR:
		case KeyEvent.VK_SHIFT:                 //****manually mapped****
		case KeyEvent.VK_SLASH:
		case KeyEvent.VK_SPACE:
		case KeyEvent.VK_STOP:
		case KeyEvent.VK_SUBTRACT:
		case KeyEvent.VK_T:
		case KeyEvent.VK_TAB:
		case KeyEvent.VK_U:
//		case KeyEvent.VK_UNDERSCORE:
//		case KeyEvent.VK_UNDO:
		case KeyEvent.VK_UP:
		case KeyEvent.VK_V:
		case KeyEvent.VK_W:
		case KeyEvent.VK_X:
		case KeyEvent.VK_Y:
		case KeyEvent.VK_Z:
                    return true;

                default:
                    return false;
        }
    }
}
